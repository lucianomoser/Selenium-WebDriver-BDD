// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.4.0.0
//      SpecFlow Generator Version:2.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace NFSe.Portal.TestesIntegracao.Declaracao.DeclaracaoNota.AdministradorMunicipal.Features
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [Microsoft.VisualStudio.TestTools.UnitTesting.TestClassAttribute()]
    public partial class DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipalFeature
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private Microsoft.VisualStudio.TestTools.UnitTesting.TestContext _testContext;
        
#line 1 "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipalVinculaEmpenho.feature"
#line hidden
        
        public virtual Microsoft.VisualStudio.TestTools.UnitTesting.TestContext TestContext
        {
            get
            {
                return this._testContext;
            }
            set
            {
                this._testContext = value;
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassInitializeAttribute()]
        public static void FeatureSetup(Microsoft.VisualStudio.TestTools.UnitTesting.TestContext testContext)
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner(null, 0);
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal", "         Como um Fiscal Municipal \r\n\t\t Desejo declarar uma nota fiscal de SERVIÇO" +
                    "S TOMADOS \r\n\t\t Sendo que o tomador e ADMINISTRADOR MUNICIPAL", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.ClassCleanupAttribute()]
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestInitializeAttribute()]
        public virtual void TestInitialize()
        {
            if (((testRunner.FeatureContext != null) 
                        && (testRunner.FeatureContext.FeatureInfo.Title != "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")))
            {
                global::NFSe.Portal.TestesIntegracao.Declaracao.DeclaracaoNota.AdministradorMunicipal.Features.DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipalFeature.FeatureSetup(null);
            }
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestCleanupAttribute()]
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Microsoft.VisualStudio.TestTools.UnitTesting.TestContext>(_testContext);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 7
#line 8
 testRunner.Given("que eu esteja executando a declaração de serviços pela primeira vez", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 9
 testRunner.Given("que eu desejo declarar as notas de serviço cujo Tomador {04914925000107} e Admini" +
                    "strador Municipal", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 10
 testRunner.Given("que a empresa de CNPJ \"04914925000107\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 11
 testRunner.Given("que a empresa de CNPJ \"04914925000107\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Usuario",
                        "Senha"});
            table1.AddRow(new string[] {
                        "\'04914925000107\'",
                        "123"});
#line 13
 testRunner.Given("que eu logue no portal como administrador", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.01 - Notas fiscais eletrônicas devem ser declaradas automaticamente e deve se" +
            "r possível vincular um empenho. Não deve ser possível retificar outros dados")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_01_NotasFiscaisEletronicasDevemSerDeclaradasAutomaticamenteEDeveSerPossivelVincularUmEmpenho_NaoDeveSerPossivelRetificarOutrosDados()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.01 - Notas fiscais eletrônicas devem ser declaradas automaticamente e deve se" +
                    "r possível vincular um empenho. Não deve ser possível retificar outros dados", null, ((string[])(null)));
#line 19
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 21
testRunner.Given("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 22
testRunner.And("que eu solicite uma nova declaração para a competência \"11/2018\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 24
testRunner.Given("eu pesquisar o número da nota fiscal \"201800000000175\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 25
testRunner.Given("que utilizamos a operação para gerenciar empenho, podemos vincular um empenho a u" +
                    "ma nota fiscal eletrônica emitida", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "UnidadeGestora",
                        "EmpenhoAno",
                        "EmpenhoNumero",
                        "SubEmpenhoNumero"});
            table2.AddRow(new string[] {
                        "1",
                        "2019",
                        "1",
                        "1"});
#line 26
testRunner.And("forneça os seguintes dados para formulário de Adicionar Empenho", ((string)(null)), table2, "And ");
#line 30
testRunner.Then("o campo Dados do Empenho está visivel no formulario de Declaração de Nota Fiscal " +
                    "\"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 31
testRunner.And("que eu desejo gravar os empenhos na anota fiscal eletrônica emitida.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.02 - Deve ser possível adicionar uma nota manual e Vincular um Empenho")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_02_DeveSerPossivelAdicionarUmaNotaManualEVincularUmEmpenho()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.02 - Deve ser possível adicionar uma nota manual e Vincular um Empenho", null, ((string[])(null)));
#line 46
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 48
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 49
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table3.AddRow(new string[] {
                        "\'07.02\'",
                        "\'4212000\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 51
testRunner.And("a seguinte configuração de serviços", ((string)(null)), table3, "And ");
#line 55
testRunner.And("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 56
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 57
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 58
testRunner.And("que eu solicite um novo empenho", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                        "UnidadeGestora",
                        "EmpenhoAno",
                        "EmpenhoNumero",
                        "SubEmpenhoNumero"});
            table4.AddRow(new string[] {
                        "1",
                        "2019",
                        "1",
                        "1"});
#line 59
testRunner.And("forneça os seguintes dados para formulário de Adicionar Empenho", ((string)(null)), table4, "And ");
#line hidden
            TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                        "Modalidade",
                        "Emissao",
                        "Numero",
                        "Serie",
                        "Aliquota",
                        "TomadorPrestador",
                        "Retido",
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "MunicipioPrestacao",
                        "Valor"});
            table5.AddRow(new string[] {
                        "Tomado",
                        "\'15/01/2019\'",
                        "\'1234\'",
                        "\'A\'",
                        "\'0\'",
                        "\'07065385000114\'",
                        "Não",
                        "\'01.01\'",
                        "\'6202300\'",
                        "\'Cerejeiras\'",
                        "100000"});
#line 63
testRunner.And("forneça os seguintes dados para formulário de declaracao de nota", ((string)(null)), table5, "And ");
#line 67
testRunner.Then("o campo Dados do Empenho está visivel no formulario de Declaração de Nota Fiscal " +
                    "\"true\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 68
testRunner.Then("será gravado a nota fiscal eletrônica e fechado o formulário de Declaração de Not" +
                    "a Fiscal.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 69
testRunner.And("a situação da nota fiscal eletrônica está \"Normal\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 70
testRunner.And("o valor da nota fiscal eletrônica fica \"29,00\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.03 - Deve ser possível imprimir apenas o boleto gerado para notas fiscais em " +
            "que há a retenção de ISS.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_03_DeveSerPossivelImprimirApenasOBoletoGeradoParaNotasFiscaisEmQueHaARetencaoDeISS_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.03 - Deve ser possível imprimir apenas o boleto gerado para notas fiscais em " +
                    "que há a retenção de ISS.", null, ((string[])(null)));
#line 75
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 77
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 78
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é optante do Simples Nacional", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                        "Mes",
                        "Ano",
                        "Faturamento",
                        "MercadoExterno",
                        "RegimeCaixa",
                        "RegimeCaixaME",
                        "FatorR",
                        "AtingiuSubLimite",
                        "UltrapassouSubLimite",
                        "SubLimiteViaRba"});
            table6.AddRow(new string[] {
                        "01",
                        "2018",
                        "700000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "02",
                        "2018",
                        "50000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "03",
                        "2018",
                        "120000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "04",
                        "2018",
                        "80000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "05",
                        "2018",
                        "111500",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "06",
                        "2018",
                        "135000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "07",
                        "2018",
                        "1160000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "08",
                        "2018",
                        "965000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "09",
                        "2018",
                        "600000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "1",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "10",
                        "2018",
                        "100000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "1",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "11",
                        "2018",
                        "0",
                        "0",
                        "0",
                        "0",
                        "0",
                        "1",
                        "0",
                        "0"});
            table6.AddRow(new string[] {
                        "12",
                        "2018",
                        "30000",
                        "0",
                        "0",
                        "0",
                        "0",
                        "1",
                        "0",
                        "0"});
#line 80
testRunner.Given("que a empresa de CNPJ \"07065385000114\" possui os seguintes faturamentos", ((string)(null)), table6, "Given ");
#line hidden
            TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table7.AddRow(new string[] {
                        "\'01.01\'",
                        "\'6202300\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 97
testRunner.Given("a seguinte configuração de serviços", ((string)(null)), table7, "Given ");
#line 101
testRunner.Given("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 102
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 103
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                        "Modalidade",
                        "Emissao",
                        "Numero",
                        "Serie",
                        "Aliquota",
                        "TomadorPrestador",
                        "Retido",
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "MunicipioPrestacao",
                        "Valor"});
            table8.AddRow(new string[] {
                        "Tomado",
                        "\'15/01/2019\'",
                        "\'1234\'",
                        "\'A\'",
                        "\'0\'",
                        "\'07065385000114\'",
                        "Sim",
                        "\'01.01\'",
                        "\'6202300\'",
                        "\'Cerejeiras\'",
                        "100000"});
#line 104
testRunner.And("forneça os seguintes dados para formulário de declaracao de nota", ((string)(null)), table8, "And ");
#line 108
testRunner.Then("será gravado a nota fiscal eletrônica e fechado o formulário de Declaração de Not" +
                    "a Fiscal.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 109
testRunner.And("a situação da retenção da nota fiscal eletrônica deverá ser \"Sim\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 110
testRunner.And("a visibilidade do botão imprimir boleto com retenção deverá ser igual a \"true\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.04 - Não deve ser possível imprimir o boleto gerado para notas fiscais que nã" +
            "o possuem retenção de ISS.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_04_NaoDeveSerPossivelImprimirOBoletoGeradoParaNotasFiscaisQueNaoPossuemRetencaoDeISS_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.04 - Não deve ser possível imprimir o boleto gerado para notas fiscais que nã" +
                    "o possuem retenção de ISS.", null, ((string[])(null)));
#line 115
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 117
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 118
testRunner.And("que a empresa de CNPJ \"07065385000114\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table9 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table9.AddRow(new string[] {
                        "\'01.01\'",
                        "\'6202300\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 119
testRunner.And("a seguinte configuração de serviços", ((string)(null)), table9, "And ");
#line 123
testRunner.Given("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 124
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 125
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table10 = new TechTalk.SpecFlow.Table(new string[] {
                        "Modalidade",
                        "Emissao",
                        "Numero",
                        "Serie",
                        "Aliquota",
                        "TomadorPrestador",
                        "Retido",
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "MunicipioPrestacao",
                        "Valor"});
            table10.AddRow(new string[] {
                        "Tomado",
                        "\'15/01/2019\'",
                        "\'1234\'",
                        "\'A\'",
                        "\'0\'",
                        "\'07065385000114\'",
                        "Não",
                        "\'01.01\'",
                        "\'6202300\'",
                        "\'Cerejeiras\'",
                        "100000"});
#line 126
testRunner.And("forneça os seguintes dados para formulário de declaracao de nota", ((string)(null)), table10, "And ");
#line 130
testRunner.Then("será gravado a nota fiscal eletrônica e fechado o formulário de Declaração de Not" +
                    "a Fiscal.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 131
testRunner.And("a situação da retenção da nota fiscal eletrônica deverá ser \"Não\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 132
testRunner.And("a opção para marcar todas notas permanece desabilitada.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.05 - O boleto deve ser gerado apenas para as notas fiscais em que há a retenç" +
            "ão de ISS e o ISS não esteja pago.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_05_OBoletoDeveSerGeradoApenasParaAsNotasFiscaisEmQueHaARetencaoDeISSEOISSNaoEstejaPago_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.05 - O boleto deve ser gerado apenas para as notas fiscais em que há a retenç" +
                    "ão de ISS e o ISS não esteja pago.", null, ((string[])(null)));
#line 136
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 138
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 139
testRunner.And("que a empresa de CNPJ \"07065385000114\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table11 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table11.AddRow(new string[] {
                        "\'07.02\'",
                        "\'4212000\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 140
testRunner.And("a seguinte configuração de serviços", ((string)(null)), table11, "And ");
#line 144
testRunner.And("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 145
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 146
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table12 = new TechTalk.SpecFlow.Table(new string[] {
                        "Modalidade",
                        "Emissao",
                        "Numero",
                        "Serie",
                        "Aliquota",
                        "TomadorPrestador",
                        "Retido",
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "MunicipioPrestacao",
                        "Valor"});
            table12.AddRow(new string[] {
                        "Tomado",
                        "\'15/01/2019\'",
                        "\'1234\'",
                        "\'A\'",
                        "\'0\'",
                        "\'07065385000114\'",
                        "Sim",
                        "\'01.01\'",
                        "\'6202300\'",
                        "\'Cerejeiras\'",
                        "100000"});
#line 147
testRunner.And("forneça os seguintes dados para formulário de declaracao de nota", ((string)(null)), table12, "And ");
#line 151
testRunner.Then("será gravado a nota fiscal eletrônica e fechado o formulário de Declaração de Not" +
                    "a Fiscal.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 152
testRunner.And("a visibilidade do botão imprimir boleto com retenção deverá ser igual a \"true\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 153
testRunner.And("será impresso o boleto de retenção de iss com a nova data de vencimento \"13/05/20" +
                    "19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 154
testRunner.And("será registrado o pagamento a guia de retenção de Issqn emitida pela empresa \"070" +
                    "65385000114\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 155
testRunner.And("a opção para marcar todas notas permanece desabilitada.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.06 - O débito gerado no sistema tributário deve ser constituído no cadastro d" +
            "a empresa que prestou o serviço.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_06_ODebitoGeradoNoSistemaTributarioDeveSerConstituidoNoCadastroDaEmpresaQuePrestouOServico_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.06 - O débito gerado no sistema tributário deve ser constituído no cadastro d" +
                    "a empresa que prestou o serviço.", null, ((string[])(null)));
#line 159
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 161
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 162
testRunner.And("que a empresa de CNPJ \"07065385000114\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table13 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table13.AddRow(new string[] {
                        "\'07.02\'",
                        "\'4212000\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 163
testRunner.And("a seguinte configuração de serviços", ((string)(null)), table13, "And ");
#line 167
testRunner.And("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 168
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 169
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            TechTalk.SpecFlow.Table table14 = new TechTalk.SpecFlow.Table(new string[] {
                        "Modalidade",
                        "Emissao",
                        "Numero",
                        "Serie",
                        "Aliquota",
                        "TomadorPrestador",
                        "Retido",
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "MunicipioPrestacao",
                        "Valor"});
            table14.AddRow(new string[] {
                        "Tomado",
                        "\'15/01/2019\'",
                        "\'1234\'",
                        "\'A\'",
                        "\'0\'",
                        "\'07065385000114\'",
                        "Sim",
                        "\'01.01\'",
                        "\'6202300\'",
                        "\'Cerejeiras\'",
                        "100000"});
#line 170
testRunner.And("forneça os seguintes dados para formulário de declaracao de nota", ((string)(null)), table14, "And ");
#line 174
testRunner.Then("será gravado a nota fiscal eletrônica e fechado o formulário de Declaração de Not" +
                    "a Fiscal.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 175
testRunner.And("a opção para marcar todas notas permanece desabilitada.", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 176
testRunner.And("a visibilidade do botão imprimir boleto com retenção deverá ser igual a \"true\".", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 177
testRunner.And("será impresso o boleto de retenção de iss com a nova data de vencimento \"13/05/20" +
                    "19\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 178
testRunner.And("a empresa com o cnpj \"07065385000114\" gerou o débito no sistema tributário para o" +
                    " cadastro \"9863\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestMethodAttribute()]
        [Microsoft.VisualStudio.TestTools.UnitTesting.DescriptionAttribute("CEN.07 - Administrador Municipal pode declarar somente notas recebidas.")]
        [Microsoft.VisualStudio.TestTools.UnitTesting.TestPropertyAttribute("FeatureTitle", "DeclaracaoDeServicoTomadoOndeTomadorAdmMunicipal")]
        public virtual void CEN_07_AdministradorMunicipalPodeDeclararSomenteNotasRecebidas_()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("CEN.07 - Administrador Municipal pode declarar somente notas recebidas.", null, ((string[])(null)));
#line 187
this.ScenarioInitialize(scenarioInfo);
            this.ScenarioStart();
#line 7
this.FeatureBackground();
#line 189
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é estabelecido", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 190
testRunner.Given("que a empresa de CNPJ \"07065385000114\" é do tipo Homologado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
            TechTalk.SpecFlow.Table table15 = new TechTalk.SpecFlow.Table(new string[] {
                        "ServicoFederal",
                        "ServicoMunicipal",
                        "Anexo",
                        "RetencaoTomador",
                        "SujeitoFatoR",
                        "DevidoNoLocal",
                        "Aliquota"});
            table15.AddRow(new string[] {
                        "\'07.02\'",
                        "\'4212000\'",
                        "AnexoIII",
                        "Não",
                        "Não",
                        "Não",
                        "2.9"});
#line 192
testRunner.Given("a seguinte configuração de serviços", ((string)(null)), table15, "Given ");
#line 196
testRunner.Given("que eu desejo consultar a declaração de servico tomado", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line 198
testRunner.And("que eu solicite uma nova declaração para a competência \"01/2019\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 200
testRunner.And("que eu solicite uma nova declaração de nota de serviço", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line 203
testRunner.Then("o valor do campo Declarar como serviço tomado deverá estar selecionado igual a \"t" +
                    "rue\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line 205
testRunner.Then("o status Habilitado para o campo Declarar como serviço tomado deverá ser \"false\"", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            this.ScenarioCleanup();
        }
    }
}
#pragma warning restore
#endregion

